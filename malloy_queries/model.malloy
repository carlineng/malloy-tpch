-- defining the data as a small reproducible example

sql: color_source_ is {
  select: """
        SELECT           'red' as color, 'Vendor1' as Vendor
        UNION ALL SELECT 'black', 'Vendor2'
        UNION ALL SELECT 'yellow', 'Vendor3'
   """
   connection: "duckdb"
}

sql: state_source_ is {
    select: """
            SELECT           'Gernamy' as state,'europe' as continent
        UNION ALL SELECT 'USA', 'america'
        UNION ALL SELECT 'Japan', 'asia'
        UNION ALL SELECT 'canada', 'america'
        UNION ALL SELECT 'Tunisia', 'africa'
        UNION ALL SELECT 'China', 'asia'
        UNION ALL SELECT 'India', 'asia'
    """
    connection: "duckdb"
}

sql: budget_source is {
  select: """
        SELECT           'Gernamy' as state,10 as Qty_Budget
        UNION ALL SELECT 'USA',19
        UNION ALL SELECT  'Japan',12
        UNION ALL SELECT  'canada',20 
        UNION ALL SELECT  'Tunisia',30 
  """
      connection: "duckdb"

}

sql: actual_source is {
        select: """SELECT           'red' as color,'Gernamy' as state,1 as Qty_sold,cast('2021-01-01' as date) as date
        UNION ALL SELECT 'red', 'USA',1,'2021-01-04' 
        UNION ALL SELECT 'black', 'Japan',1,'2021-01-02' 
        UNION ALL SELECT 'black', 'China',1,'2021-01-02' 
      """
          connection: "duckdb"
}

source: Actual is from_sql(actual_source)
{
  join_one: dim_color is from_sql(color_source_) {primary_key: color } with color
  join_one: dim_state is from_sql(state_source_) { primary_key: state } with state
  measure : Quantity is Qty_sold.sum()
}

query: Actual -> {
  project: *
}

source: Budget is from_sql(budget_source)
{
  join_one: dim_state is from_sql(state_source_) {primary_key: state } with state
  measure : _Budget is Qty_Budget.sum()  
}

query: Budget -> {
  project: *
}

source: state_conformed is from_sql(state_source_) {
  primary_key: state
  join_many: Budget on state = Budget.state
  join_many: Actual on state = Actual.state
}

Query: Budget_by_state is Budget -> {
  aggregate:_Budget
  group_by : dim_state.state
}

Query: Actual_by_state is Actual ->{
  aggregate:Quantity
  group_by : dim_state.state
}

query: merge_results is from_sql(state_source_) {
   join_one: q2 is from(->Budget_by_state ) with state
   join_one: q3 is from(->Actual_by_state) with state
} ->{
  
  group_by : continent
  aggregate: QTY_Budget is sum(q2._Budget),QTY_Sold is sum(q3.Quantity)
}

query: state_conformed -> {
  group_by: continent
  aggregate: 
    qty_budget is sum(Budget.Qty_Budget)
    qty_sold is Actual.Quantity
}


-- TPC-H example

-- source data at https://drive.google.com/drive/folders/1mZC3NuPBZC4mjP3_kH18c9fLrv8ME7RU
-- Malloy file require a Visual studio extension  https://marketplace.visualstudio.com/items?itemName=malloydata.malloy-vscode
-- Lineitem parquet file contains 59 Million records, you can just duplicate the file to increase the data size for testing.

source: lineitem is table('duckdb:../data/lineitem.parquet')
{ 
  join_one: 
    orders is table('duckdb:../data/orders.parquet') on orders.o_orderkey = l_orderkey
    customer is table('duckdb:../data/customer.parquet') on customer.c_custkey = orders.o_custkey

  measure :   
    _count is count()
    count_customers is count( distinct customer.c_custkey)

  query: customers_bought_something is {  
    aggregate: count_customers
  }
}